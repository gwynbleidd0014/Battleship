(()=>{"use strict";var n={110:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".game-view {\n  display: flex;\n  gap: 2em;\n  margin: 0 auto;\n  width: 85vw;\n  margin-top: 5em;\n}\n\n.game-view-cell {\n  width: calc(calc(40vw - 25px) / 10);\n  height: calc(40vw / 10);\n  background: var(--white);\n  border: 1px solid var(--black);\n}\n","",{version:3,sources:["webpack://./src/css/game-view.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,QAAQ;EACR,cAAc;EACd,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,mCAAmC;EACnC,uBAAuB;EACvB,wBAAwB;EACxB,8BAA8B;AAChC",sourcesContent:[".game-view {\n  display: flex;\n  gap: 2em;\n  margin: 0 auto;\n  width: 85vw;\n  margin-top: 5em;\n}\n\n.game-view-cell {\n  width: calc(calc(40vw - 25px) / 10);\n  height: calc(40vw / 10);\n  background: var(--white);\n  border: 1px solid var(--black);\n}\n"],sourceRoot:""}]);const s=i},198:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".place-carrier-view {\n  background: var(--black);\n  width: 100vw;\n  height: 100vh;\n  overflow-x: hidden;\n  color: var(--white);\n}\n\n.place-carrier-wrapper {\n  width: 90vw;\n  margin: 0 auto;\n  text-align: center;\n  background: var(--gray);\n  margin-top: 5em;\n  padding: 1em;\n  text-transform: uppercase;\n  border-radius: 5px;\n  margin-bottom: 2em;\n}\n\n.welcome-to-game {\n  font-size: 1rem;\n  color: var(--yellow);\n}\n\n.place-carrier {\n  margin-bottom: 0.5em;\n}\n\n.flip-btn {\n  color: var(--blue);\n  padding: 0.3em 0.7em;\n  transition:\n    background-color 200ms ease-in,\n    color 200ms ease-in;\n  width: max-content;\n  margin: 0 auto;\n  border-radius: 5px;\n  font-weight: 600;\n  letter-spacing: 1px;\n}\n\n.flip-btn:hover {\n  color: var(--white);\n  background: var(--blue);\n  cursor: pointer;\n}\n\n.placing-cell {\n  width: calc(calc(90vw - 25px) / 10);\n  height: calc(90vw / 10);\n  background: var(--white);\n  border: 1px solid var(--black);\n}\n\n.starting-board {\n  border: 1px solid var(--black);\n}\n","",{version:3,sources:["webpack://./src/css/placing-view.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,uBAAuB;EACvB,eAAe;EACf,YAAY;EACZ,yBAAyB;EACzB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB;;uBAEqB;EACrB,kBAAkB;EAClB,cAAc;EACd,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;AACjB;;AAEA;EACE,mCAAmC;EACnC,uBAAuB;EACvB,wBAAwB;EACxB,8BAA8B;AAChC;;AAEA;EACE,8BAA8B;AAChC",sourcesContent:[".place-carrier-view {\n  background: var(--black);\n  width: 100vw;\n  height: 100vh;\n  overflow-x: hidden;\n  color: var(--white);\n}\n\n.place-carrier-wrapper {\n  width: 90vw;\n  margin: 0 auto;\n  text-align: center;\n  background: var(--gray);\n  margin-top: 5em;\n  padding: 1em;\n  text-transform: uppercase;\n  border-radius: 5px;\n  margin-bottom: 2em;\n}\n\n.welcome-to-game {\n  font-size: 1rem;\n  color: var(--yellow);\n}\n\n.place-carrier {\n  margin-bottom: 0.5em;\n}\n\n.flip-btn {\n  color: var(--blue);\n  padding: 0.3em 0.7em;\n  transition:\n    background-color 200ms ease-in,\n    color 200ms ease-in;\n  width: max-content;\n  margin: 0 auto;\n  border-radius: 5px;\n  font-weight: 600;\n  letter-spacing: 1px;\n}\n\n.flip-btn:hover {\n  color: var(--white);\n  background: var(--blue);\n  cursor: pointer;\n}\n\n.placing-cell {\n  width: calc(calc(90vw - 25px) / 10);\n  height: calc(90vw / 10);\n  background: var(--white);\n  border: 1px solid var(--black);\n}\n\n.starting-board {\n  border: 1px solid var(--black);\n}\n"],sourceRoot:""}]);const s=i},806:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'.start-view {\n  background: var(--black);\n  width: 100vw;\n  height: 100vh;\n  color: var(--white);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow: hidden;\n}\n\n.sub-heading {\n  margin-top: 12em;\n  color: var(--yellow);\n  font-size: 1.07rem;\n  text-align: center;\n  text-transform: uppercase;\n}\n\n.heading {\n  margin-top: 0.2em;\n  display: block;\n  text-align: center;\n  color: var(--white);\n  font-family: "Rubik Mono One", sans-serif;\n  font-size: 2rem;\n  margin-bottom: 0.8em;\n}\n\n.start-btn {\n  text-transform: uppercase;\n  font-weight: 600;\n  letter-spacing: 1px;\n  color: var(--blue);\n  padding: 0.3em 0.5em;\n  transition:\n    backround-color 200ms ease-in,\n    color 200ms ease-in;\n  border-radius: 5px;\n}\n\n.start-btn:hover {\n  background: var(--blue);\n  color: var(--white);\n  cursor: pointer;\n}\n\n@media screen and (min-width: 768px) {\n  .sub-heading {\n    font-size: 2rem;\n  }\n\n  .heading {\n    font-size: 4rem;\n  }\n\n  .start-btn {\n    font-size: 2rem;\n  }\n}\n',"",{version:3,sources:["webpack://./src/css/start-view.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,oBAAoB;EACpB,kBAAkB;EAClB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,kBAAkB;EAClB,mBAAmB;EACnB,yCAAyC;EACzC,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,yBAAyB;EACzB,gBAAgB;EAChB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;EACpB;;uBAEqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE;IACE,eAAe;EACjB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,eAAe;EACjB;AACF",sourcesContent:['.start-view {\n  background: var(--black);\n  width: 100vw;\n  height: 100vh;\n  color: var(--white);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow: hidden;\n}\n\n.sub-heading {\n  margin-top: 12em;\n  color: var(--yellow);\n  font-size: 1.07rem;\n  text-align: center;\n  text-transform: uppercase;\n}\n\n.heading {\n  margin-top: 0.2em;\n  display: block;\n  text-align: center;\n  color: var(--white);\n  font-family: "Rubik Mono One", sans-serif;\n  font-size: 2rem;\n  margin-bottom: 0.8em;\n}\n\n.start-btn {\n  text-transform: uppercase;\n  font-weight: 600;\n  letter-spacing: 1px;\n  color: var(--blue);\n  padding: 0.3em 0.5em;\n  transition:\n    backround-color 200ms ease-in,\n    color 200ms ease-in;\n  border-radius: 5px;\n}\n\n.start-btn:hover {\n  background: var(--blue);\n  color: var(--white);\n  cursor: pointer;\n}\n\n@media screen and (min-width: 768px) {\n  .sub-heading {\n    font-size: 2rem;\n  }\n\n  .heading {\n    font-size: 4rem;\n  }\n\n  .start-btn {\n    font-size: 2rem;\n  }\n}\n'],sourceRoot:""}]);const s=i},402:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),s=t(806),c=t(553),A=t(198),l=t(110),d=i()(o());d.i(s.Z),d.i(c.Z),d.i(A.Z),d.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Rubik+Mono+One&display=swap);"]),d.i(l.Z),d.push([n.id,':root {\n  --black: #000;\n  --yellow: #faec00;\n  --white: #fff;\n  --blue: #0cabe8;\n  --gray: #9d9d9d33;\n}\n\nhtml {\n  font-family: "Open Sans", sans-serif;\n  font-size: 16px;\n  font-weight: 400;\n}\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  border-radius: 0;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n}\n',"",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAKA;EACE,aAAa;EACb,iBAAiB;EACjB,aAAa;EACb,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;EACpC,eAAe;EACf,gBAAgB;AAClB;;AAEA;;;EAGE,SAAS;EACT,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sCAAsC;AACxC",sourcesContent:['@import "start-view.css";\n@import "utility.css";\n@import "placing-view";\n@import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Rubik+Mono+One&display=swap");\n@import "game-view";\n:root {\n  --black: #000;\n  --yellow: #faec00;\n  --white: #fff;\n  --blue: #0cabe8;\n  --gray: #9d9d9d33;\n}\n\nhtml {\n  font-family: "Open Sans", sans-serif;\n  font-size: 16px;\n  font-weight: 400;\n}\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  border-radius: 0;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n}\n'],sourceRoot:""}]);const u=d},553:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".hidden {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/css/utility.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf",sourcesContent:[".hidden {\n  display: none;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var l=t(a[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),A=t(216),l=t.n(A),d=t(589),u=t.n(d),p=t(402),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;class h{constructor(n,e){this.name=n,this.length=e,this.hits=0,this.sunk=!1}hit(){return this.hits++,this.hits}isSunk(){return this.hits>=this.length}}class f{constructor(){this.board=this.buildBoard(10),this.ships={}}buildBoard(n){let e=[];for(let t=0;t<n;t++){e.push([]);for(let r=0;r<n;r++)e[t].push("Free")}return e}placeShip(n){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],t=arguments.length>2?arguments[2]:void 0,[r,o]=n;try{if(e)for(let n=0;n<t.length;n++)this.board[r][o]=t.name,o++;else for(let n=0;n<t.length;n++)this.board[r][o]=t.name,r++;return this.ships[t.name]=t,this.board}catch(r){console.log(r),console.log(n[0],t.length,e)}}placeShipsRandomly(n){for(let[e,t]of n){const n=Math.floor(2*Math.random())+1===1,r=new h(e,t);let o=!0,a=null;for(;o;)a=[Math.floor(10*Math.random()),Math.floor(10*Math.random())],o=!M(a,this.board,r.length,n)[0];this.placeShip(a,n,r)}}receiveAttack(n,e){return n>=0&&n<this.board.length&&e>=0&&e<this.board.length?"Free"===this.board[n][e]?(this.board[n][e]="Missed","Miss"):(this.ships[this.board[n][e]].hit(),"Hit"):"No such position"}allShipsSunk(){for(let n of Object.values(this.ships))if(n.length>n.hits)return!1;return!0}}const g=document.querySelector(".starting-board"),v=(document.querySelector(".place-carrier"),document.querySelector(".place-carrier-view")),B=document.querySelector(".player1-board"),b=(document.querySelector(".player2-board"),document.querySelector(".game-view"));let C=!0,E=!0,w=0;const y=[["Carrier",5],["Battleship",4],["Cruiser",3],["Submarine",3],["Destroyer",2]],k=new f,x=new f;function S(n,e,t){for(let r=0;r<10;r++)for(let o=0;o<10;o++){const a=document.createElement("div");a.className=`cell ${e}`,a.dataset.pos=r+","+o,"Free"!==t[r][o]&&(a.style.backgroundColor="green"),n.appendChild(a)}}function M(n,e,t){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:C;const[o,a]=n;let i=0;if(r)for(let n=a;n<e[o].length&&"Free"===e[o][n];n++)i++;else for(let n=o;n<e.length&&"Free"===e[n][a];n++)i++;return i<t?[!1,i]:[!0,t]}function z(n){return n.dataset.pos.split(",").map((n=>parseInt(n)))}function j(n,e,t,r,o){for(let a=0;a<e;a++){const e=t?"green":"red";if(C)n.style.backgroundColor=e,n=n?.nextElementSibling;else{if(n.style.backgroundColor=e,r+10>99)return;n=o[r+10],r+=10}}}new class{constructor(n){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.name=n,this.ai=e,e){this.available=[];for(let n=0;n<10;n++)for(let e=0;e<10;e++)this.available.push([n,e])}}makeMove(n,e){if(this.ai){const e=Math.floor(Math.random()*this.available.length);n.receiveAttack(this.available[e][0],this.available[e][1]),this.available.splice(e,1)}else n.receiveAttack(e[0],e[1])}}("Jake"),function(n,e){for(let e=0;e<10;e++)for(let t=0;t<10;t++){const r=document.createElement("div");r.className="cell placing-cell",r.dataset.pos=e+","+t,n.appendChild(r)}}(g),function(){const n=document.querySelectorAll(".placing-cell");document.querySelector(".flip-btn").addEventListener("click",(()=>{C=!C})),n.forEach(((e,t)=>{e.addEventListener("mouseover",(e=>{E&&function(n,e,t,r){const[o,a]=M(z(n),k.board,e);j(n,a,o,t,r)}(e.target,y[w][1],t,n)})),e.addEventListener("mouseout",(e=>{E&&function(n,e,t,r,o){for(let a=0;a<e;a++){const[e,i]=z(n);if(C){if("Free"===o[e][i]&&(n.style.backgroundColor="white"),n=n.nextElementSibling,t+a===99)return}else{if("Free"===o[e][i]&&(n.style.backgroundColor="white"),t+10>99)return;n=r[t+10],t+=10}}}(e.target,y[w][1]+1,t,n,k.board)})),e.addEventListener("click",(e=>{!function(n,e,t,r,o){const[a,i]=M(z(n),t.board,y[w][1]);if(!a)return;const s=new h(y[w][0],y[w][1]);t.placeShip(e,C,s),w++,5===w&&(E=!1,v.classList.add("hidden"),b.classList.remove("hidden"),x.placeShipsRandomly(y),S(B,"game-view-cell",k.board),S(B,"game-view-cell",x.board)),j(n,i,a,r,o)}(e.target,z(e.target),k,t,n)}))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,